{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { defineComponent } from 'vue';\nexport default defineComponent({\n  data() {\n    return {\n      // Data for handling city input and autocomplete\n      city: '',\n      allCities: ['New York', 'Los Angeles', 'Chicago', 'San Francisco', 'Seattle'],\n      menu: false,\n      startDate: '',\n      // Initialize with an empty string or a default date\n      endDate: '',\n      // Data for budget selection\n      budgets: [{\n        label: 'Cheap',\n        value: 'cheap',\n        range: '0 - 1000 USD',\n        selected: false\n      }, {\n        label: 'Medium',\n        value: 'medium',\n        range: '1000 - 2500 USD',\n        selected: false\n      }, {\n        label: 'Expensive',\n        value: 'expensive',\n        range: '2500+ USD',\n        selected: false\n      }],\n      // Data for travel companion selection\n      travelCompanions: [{\n        label: 'Solo',\n        value: 'solo',\n        selected: false\n      }, {\n        label: 'Group',\n        value: 'group',\n        selected: false\n      }, {\n        label: 'Couple',\n        value: 'couple',\n        selected: false\n      }],\n      // Other data properties\n      selectedDate: null,\n      isDatePickerVisible: false,\n      travelDestination: null,\n      selectedBudget: null\n    };\n  },\n  computed: {\n    // Computed property for autocomplete suggestions based on user input\n    autocompleteCities() {\n      // Check if this.city is null or undefined\n      if (!this.city == null) {\n        return this.allCities;\n      }\n      const lowerCaseInput = this.city.toLowerCase();\n      return this.allCities.filter(city => city.toLowerCase().includes(lowerCaseInput));\n      // Filter cities based on user input\n      // return this.allCities.filter(city =>\n      //   city.toLowerCase().includes(this.city.toLowerCase())\n      // );\n    }\n  },\n\n  methods: {\n    // Method for handling input change in the city text field\n    onInputChange() {\n      this.menu = !!this.city; // Show menu only when there is input\n    },\n\n    // Method for selecting a city from the autocomplete suggestions\n    selectCity(selectedCity) {\n      this.city = selectedCity;\n      this.menu = false;\n    },\n    // Method for displaying the date picker\n    showDatePicker() {\n      this.isDatePickerVisible = true;\n    },\n    // Method for hiding the date picker\n    hideDatePicker() {\n      this.isDatePickerVisible = false;\n    },\n    // Method for selecting a budget\n    selectBudget(selectedBudget) {\n      this.budgets.forEach(budget => {\n        budget.selected = budget === selectedBudget;\n      });\n    },\n    // Method for selecting a travel companion\n    selectTravelCompanion(selectedCompanion) {\n      this.travelCompanions.forEach(companion => {\n        companion.selected = companion === selectedCompanion;\n      });\n    },\n    // Method for generating an itinerary or navigating to another view page\n    generateItinerary() {\n      // Add logic for generating the itinerary or route to another view page\n      // For example, you can use Vue Router to navigate to a new page\n      this.$router.push('/Itinerary');\n    }\n  }\n});","map":{"version":3,"names":["defineComponent","data","city","allCities","menu","startDate","endDate","budgets","label","value","range","selected","travelCompanions","selectedDate","isDatePickerVisible","travelDestination","selectedBudget","computed","autocompleteCities","lowerCaseInput","toLowerCase","filter","includes","methods","onInputChange","selectCity","selectedCity","showDatePicker","hideDatePicker","selectBudget","forEach","budget","selectTravelCompanion","selectedCompanion","companion","generateItinerary","$router","push"],"sources":["/Users/kai/journey-genius-ui/src/views/StartPlanning.vue"],"sourcesContent":["<template>\n  <v-container>\n    <!-- Header -->\n    <v-row justify=\"center\" class=\"mt-4\">\n      <v-col cols=\"12\" md=\"8\" class=\"text-center\">\n        <h2 style=\"font-size: 2.5rem;\" class=\"headline text-deep-purple-accent-2\">Plan Your Next Adventure</h2>\n        <p>Our app transforms vacation planning by creating personalized itineraries based on user preferences. Users\n          input their budget, location, stay duration, and interests. Using advanced algorithms, the app scans diverse\n          travel data to find budget-friendly accommodations, local attractions, and outdoor activities, optimizing the\n          itinerary for a cost-effective trip.</p>\n        <br>\n        <hr>\n      </v-col>\n    </v-row>\n\n    <!-- Section for storing where they want to travel -->\n    <v-row justify=\"center\">\n      <v-col cols=\"12\" md=\"8\">\n        <v-card class=\"pa-4 mb-4\">\n          <h3 class=\"headline text-deep-purple-accent-2\">Where do you want to travel?</h3>\n          <br>\n\n          <!-- This was working -->\n          <v-autocomplete v-model=\"city\" :items=\"autocompleteCities\" label=\"Type a City\" @input=\"onInputChange\">\n</v-autocomplete>\n\n\n\n        </v-card>\n      </v-col>\n    </v-row>\n\n    <!-- Date input components -->\n    <v-row justify=\"center\">\n      <v-col cols=\"12\" md=\"8\">\n        <v-card class=\"pa-4 mb-4\">\n          <h3 class=\"headline text-deep-purple-accent-2\">How Long Is Your Trip?</h3>\n          <br>\n          <v-row>\n            <!-- Start Date -->\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"startDate\" label=\"Start Date\" type=\"date\" @input=\"updateStartDate\"></v-text-field>\n          </v-col>\n\n          <!-- End Date -->\n          <v-col cols=\"6\">\n            <v-text-field v-model=\"endDate\" label=\"End Date\" type=\"date\" @input=\"updateEndDate\"></v-text-field>\n          </v-col>\n          </v-row>\n        </v-card>\n      </v-col>\n    </v-row>\n\n\n    <!-- Budget selection -->\n    <v-row justify=\"center\">\n      <v-col cols=\"12\" md=\"8\">\n        <v-card class=\"pa-4\">\n          <h3 class=\"headline text-deep-purple-accent-2\">How Much Have You Allocated for Your Expenses?</h3>\n          <p>The budget is specifically designated for activities and dining experiences.</p>\n          <br>\n          <v-row justify=\"center\">\n            <v-col v-for=\"budget in budgets\" :key=\"budget.value\" class=\"mb-2\">\n              <v-btn class=\"budget-btn\" stacked=\"\" :color=\"budget.selected ? 'deep-purple' : 'deep-purple-accent-2'\"\n                @click=\"selectBudget(budget)\">\n                <v-icon v-if=\"budget.value === 'cheap'\">mdi-cash-remove</v-icon>\n                <v-icon v-if=\"budget.value === 'medium'\">mdi-cash</v-icon>\n                <v-icon v-if=\"budget.value === 'expensive'\">mdi-cash-multiple</v-icon>\n                <div>{{ budget.label }}</div>\n                <div class=\"caption text--secondary\">{{ budget.range }}</div>\n              </v-btn>\n            </v-col>\n          </v-row>\n        </v-card>\n      </v-col>\n    </v-row>\n\n\n    <!-- Travel Companions selection -->\n    <v-row justify=\"center\">\n      <v-col cols=\"12\" md=\"8\">\n        <v-card class=\"pa-4\">\n          <h3 class=\"headline text-deep-purple-accent-2\">Who Are Your Travel Companions?</h3>\n          <v-row justify=\"center\">\n            <v-col v-for=\"companion in travelCompanions\" :key=\"companion.value\" cols=\"4\">\n              <v-btn class=\"companion-btn\" :color=\"companion.selected ? 'deep-purple' : 'deep-purple-accent-2'\" stacked\n                @click=\"selectTravelCompanion(companion)\">\n                <v-icon v-if=\"companion.value === 'solo'\">mdi-account</v-icon>\n                <v-icon v-if=\"companion.value === 'group'\">mdi-account-group-outline</v-icon>\n                <v-icon v-if=\"companion.value === 'couple'\">mdi-heart</v-icon>\n                <div>{{ companion.label }}</div>\n              </v-btn>\n            </v-col>\n          </v-row>\n        </v-card>\n      </v-col>\n    </v-row>\n\n\n    <!-- Generate button -->\n    <v-row justify=\"center\">\n      <v-col cols=\"12\" md=\"8\" class=\"text-center\">\n        <br>\n        <v-btn class=\"generate-btn\" color=\"deep-purple-accent-2\" @click=\"generateItinerary\">\n          Generate\n        </v-btn>\n      </v-col>\n    </v-row>\n\n  </v-container>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\n\nexport default defineComponent({\n  data() {\n    return {\n      // Data for handling city input and autocomplete\n      city: '',\n      allCities: ['New York', 'Los Angeles', 'Chicago', 'San Francisco', 'Seattle'],\n      menu: false,\n      startDate: '', // Initialize with an empty string or a default date\n      endDate: '',\n\n      // Data for budget selection\n      budgets: [\n        { label: 'Cheap', value: 'cheap', range: '0 - 1000 USD', selected: false },\n        { label: 'Medium', value: 'medium', range: '1000 - 2500 USD', selected: false },\n        { label: 'Expensive', value: 'expensive', range: '2500+ USD', selected: false },\n      ],\n\n      // Data for travel companion selection\n      travelCompanions: [\n        { label: 'Solo', value: 'solo', selected: false },\n        { label: 'Group', value: 'group', selected: false },\n        { label: 'Couple', value: 'couple', selected: false },\n      ],\n\n      // Other data properties\n      selectedDate: null,\n      isDatePickerVisible: false,\n      travelDestination: null,\n      selectedBudget: null,\n    };\n  },\n  computed: {\n    // Computed property for autocomplete suggestions based on user input\n    autocompleteCities() {\n      // Check if this.city is null or undefined\n      if (!this.city == null) {\n        return this.allCities;\n      }\n\n      const lowerCaseInput = this.city.toLowerCase();\n      return this.allCities.filter(city => city.toLowerCase().includes(lowerCaseInput));\n      // Filter cities based on user input\n      // return this.allCities.filter(city =>\n      //   city.toLowerCase().includes(this.city.toLowerCase())\n      // );\n    },\n\n  },\n  methods: {\n    // Method for handling input change in the city text field\n    onInputChange() {\n      this.menu = !!this.city; // Show menu only when there is input\n    },\n    // Method for selecting a city from the autocomplete suggestions\n    selectCity(selectedCity) {\n      this.city = selectedCity;\n      this.menu = false;\n    },\n\n\n\n\n    // Method for displaying the date picker\n    showDatePicker() {\n      this.isDatePickerVisible = true;\n    },\n    // Method for hiding the date picker\n    hideDatePicker() {\n      this.isDatePickerVisible = false;\n    },\n    // Method for selecting a budget\n    selectBudget(selectedBudget) {\n      this.budgets.forEach((budget) => {\n        budget.selected = budget === selectedBudget;\n      });\n    },\n    // Method for selecting a travel companion\n    selectTravelCompanion(selectedCompanion) {\n      this.travelCompanions.forEach((companion) => {\n        companion.selected = companion === selectedCompanion;\n      });\n    },\n    // Method for generating an itinerary or navigating to another view page\n    generateItinerary() {\n      // Add logic for generating the itinerary or route to another view page\n      // For example, you can use Vue Router to navigate to a new page\n      this.$router.push('/Itinerary');\n    },\n  },\n});\n</script>\n\n\n<style>\n.companion-btn {\n  width: 100%;\n  margin-top: 8px;\n}\n\n.budget-btn {\n  width: 100%;\n  margin-top: 8px;\n}\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}